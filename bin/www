'use strict';
require('dotenv').config();
const path = require('path')
console.log("Service Start")
/**
 * set up environment for Dev or Prod logging
 */
let port;
if (process.env["MODE"] === "DEV") {
    process.env["MODE"] = "DEV"

    if (process.env["DEBUG_DEV"])
        process.env["DEBUG"] = process.env["DEBUG_DEV"]

    if (process.env["DEV_GOOGLE_APPLICATION_CREDENTIALS"])
        process.env["GOOGLE_APPLICATION_CREDENTIALS"] = path.join(__dirname, "..", process.env["DEV_GOOGLE_APPLICATION_CREDENTIALS"])

    port = normalizePort(process.env.DEV_PORT || '3000');

} else {
    //if no google default credentials are available from the environment then get from the default location
    if(!process.env["GOOGLE_APPLICATION_CREDENTIALS"])
        process.env["GOOGLE_APPLICATION_CREDENTIALS"] = path.join(__dirname, "..", "config/keys/ServiceAccount.json")
    port = normalizePort(process.env.PORT || '3000');
}

if (process.env[`DEBUG_OVERRIDE`]) {
    process.env[`DEBUG`] = process.env[`DEBUG_OVERRIDE`]
}


/**
 * logging services.
 */

const logger = require('debug')('server:default');
logger.log = console.log.bind(console);
const logger_error = require('debug')('server:error');
logger_error.log = console.log.bind(console);
const logger_verbose = require('debug')('server:verbose');
logger_verbose.log = console.log.bind(console);

logger("DEBUG regex: ", process.env[`DEBUG`]);

/**
 * Module dependencies.
 */

const app = require('../server/app');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */


app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    logger('Listening on ' + bind);
}
